apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    testBuildType "qa"
    compileSdkVersion 28
    defaultConfig {
        applicationId "in.co.ankitarora.templatechooser"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "in.co.ankitarora.templatechooser.test.CucumberTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        qa {
            initWith debug
            versionNameSuffix "-qa"
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
        test.java.srcDirs += 'src/test/java'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])


    def libraries = rootProject.ext.libraries
    implementation libraries.rxKotlin
    implementation libraries.rxAndroid
    implementation libraries.androidCoreKtx
    implementation libraries.picasso
    implementation libraries.picassoOkttpDownloader
    implementation libraries.retrofit
    implementation libraries.retrofitGsonConverter
    implementation libraries.cardView
    implementation libraries.appCompat
    implementation libraries.retrofitRxJavaAdapter
    implementation libraries.constraintLayout
    implementation libraries.kotlinLang

    def testLibraries = rootProject.ext.testLibraries
    testImplementation testLibraries.junit
    testImplementation testLibraries.roboelectric
    testImplementation testLibraries.mockito
    testImplementation testLibraries.pactConsumerJunit
    testImplementation testLibraries.pactConsumerJava8

    def acceptanceTestLibraries = rootProject.ext.acceptanceTestLibraries

    androidTestImplementation acceptanceTestLibraries.androidTestEspresso
    androidTestImplementation acceptanceTestLibraries.androidTestEspressoRunner
    androidTestImplementation acceptanceTestLibraries.testRules
    androidTestImplementation acceptanceTestLibraries.cucumberAndroid
    androidTestImplementation acceptanceTestLibraries.cucumberPicoContainer
    androidTestImplementation acceptanceTestLibraries.cucumberJvmDeps

    api 'androidx.test.espresso.idling:idling-net:3.1.1'

    //TODO should be only for 1 build variant [Test], as we'll be adding code to our builds
    implementation acceptanceTestLibraries.idlingResourceConcurrent
    implementation ('com.jakewharton.espresso:okhttp3-idling-resource:1.0.0') {
        exclude module: 'support-annotations'
    }
}

gradle.taskGraph.afterTask { task, state ->
    if ((task == connectedAndroidTest) || (task == connectedQaAndroidTest) || (task == connectedCheck)) {
        def reportDir = new File(project.buildDir, "cucumber-reports")
        if (!reportDir.exists()) {
            reportDir.mkdirs()
        }
        println 'Retrieving Cucumber test report to ' + project.buildDir
        def processBuilder = new ProcessBuilder(
                ['adb', 'pull', "/mnt/sdcard/cucumber-reports/", reportDir.getAbsolutePath()])
        processBuilder.start()
    }
}
